package simu.model;

import java.util.LinkedList;
import java.util.Random;

import eduni.distributions.ContinuousGenerator;
import simu.framework.Kello;
import simu.framework.Tapahtuma;
import simu.framework.Tapahtumalista;

// TODO:
// Palvelupistekohtaiset toiminnallisuudet, laskutoimitukset (+ tarvittavat muuttujat) ja raportointi koodattava
public class Palvelupiste {

	private LinkedList<Asiakas> jono = new LinkedList<Asiakas>(); // Tietorakennetoteutus
	
	private ContinuousGenerator generator;
	private Tapahtumalista tapahtumalista;
	private TapahtumanTyyppi skeduloitavanTapahtumanTyyppi; 
	
	//JonoStartegia strategia; //optio: asiakkaiden j√§rjestys
	
	private boolean varattu = false;


	public Palvelupiste(ContinuousGenerator generator, Tapahtumalista tapahtumalista, TapahtumanTyyppi tyyppi){
		this.tapahtumalista = tapahtumalista;
		this.generator = generator;
		this.skeduloitavanTapahtumanTyyppi = tyyppi;
				
	}
	
	public Palvelupiste(Tapahtumalista tapahtumalista,TapahtumanTyyppi tyyppi) {
		this.tapahtumalista = tapahtumalista;
		this.skeduloitavanTapahtumanTyyppi = tyyppi;
	}
	
	public Palvelupiste(Tapahtumalista tapahtumalista) { //Korjaamopiste
		this.tapahtumalista = tapahtumalista;
	}


	public void lisaaJonoon(Asiakas a){   // Jonon 1. asiakas aina palvelussa
		jono.add(a);
		
	}

	public Asiakas otaJonosta(){  // Poistetaan palvelussa ollut
		varattu = false;
		return jono.poll();
	}
	
	public void aloitaPalvelu() {
		if(skeduloitavanTapahtumanTyyppi!=TapahtumanTyyppi.ARR1) {
			varattu = true;
			Random random = new Random(System.nanoTime());
			int num = random.nextInt(8)+1;
			switch(num) {
				case 1:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP1;
					break;
				case 2:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP2;
					break;
				case 3:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP3;
					break;
				case 4:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP4;
					break;
				case 5:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP5;
					break;
				case 6:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP6;
					break;
				case 7:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP7;
					break;
				case 8:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP8;
					break;
				default:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP1;
					break;
			}
			
			tapahtumalista.lisaa(new Tapahtuma(skeduloitavanTapahtumanTyyppi,Kello.getInstance().getAika()+Tapahtuma.getKeskimAika(skeduloitavanTapahtumanTyyppi)));
		}
	}

	/*
	public void aloitaPalvelu(){  //Aloitetaan uusi palvelu, asiakas on jonossa palvelun aikana
		varattu = true;
		double palveluaika = generator.sample();
		tapahtumalista.lisaa(new Tapahtuma(skeduloitavanTapahtumanTyyppi,Kello.getInstance().getAika()+palveluaika));
	}
	*/


	public boolean onVarattu(){
		return varattu;
	}


	public boolean onJonossa(){
		return jono.size() != 0;
	}
	
	public int getJononPituus() {
		return jono.size();
	}

}
