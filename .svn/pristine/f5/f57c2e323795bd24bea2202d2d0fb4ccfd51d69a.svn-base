package simu.model;

import eduni.distributions.Negexp;
import eduni.distributions.Normal;
import simu.framework.Kello;
import simu.framework.Moottori;
import simu.framework.Saapumisprosessi;
import simu.framework.Tapahtuma;

public class OmaMoottori extends Moottori{
	
	private Saapumisprosessi saapumisprosessi;
	private int tyontekijatLKM;
	private int palvelupisteidenLKM;
	
	public OmaMoottori(){
	}

	
	@Override
	protected void alustukset() {
		
		//Varmistetaan että on vähintään kaksi palvelupistettä: tiski ja korjaamo
		if(palvelupisteidenLKM<2)
			palvelupisteidenLKM = 2;
				
		//Varmistetaan että on ainakin yksi työntekijä per palvelupiste
		if(tyontekijatLKM < palvelupisteidenLKM)
			tyontekijatLKM = palvelupisteidenLKM;
		
		palvelupisteet = new Palvelupiste[palvelupisteidenLKM];
		
		palvelupisteet[0] = new Palvelupiste(new Normal(10,6), tapahtumalista, TapahtumanTyyppi.ARR1);
		
		for(int i = 1 ; i < palvelupisteidenLKM; i++) {
			palvelupisteet[i] = new Palvelupiste(new Normal(10,6), tapahtumalista, TapahtumanTyyppi.DEP1);
		}
		
		palvelupisteet[0].setTyontekijat(1); //Tiski tarvitsee vain yhden työntekijän
		
		//i = 1, koska yksi työntekijä asetettiin jo tiskille töihin
		for(int i = 1; i < tyontekijatLKM;i++) {
			
			//Jos on useampi korjauspiste:
			//Etsitään mihin palvelupisteeseen asetetaan seuraava työntekijä
			//jotta työntekijät jakautuvat tasaisesti
			int indexSeuraava = 1;
			if(palvelupisteet.length>2) {
				for(int j = 1; j < (palvelupisteet.length); j++) {
					if(palvelupisteet[j].getTyontekijat()<=palvelupisteet[indexSeuraava].getTyontekijat()) {
						indexSeuraava=j;
					}
				}
			}
			palvelupisteet[indexSeuraava].increaseTyontekijat();
		}
		
		/* VANHA TYYLI MILLÄ TEHTIIN PALVELUPISTEET
		palvelupisteet[0]=new Palvelupiste(new Normal(10,6), tapahtumalista, TapahtumanTyyppi.DEP1);
		palvelupisteet[1]=new Palvelupiste(new Normal(10,10), tapahtumalista, TapahtumanTyyppi.DEP2);
		palvelupisteet[2]=new Palvelupiste(new Normal(5,3), tapahtumalista, TapahtumanTyyppi.DEP3);
		*/
		
		saapumisprosessi = new Saapumisprosessi(new Negexp(15,5), tapahtumalista, TapahtumanTyyppi.ARR1);
		
		saapumisprosessi.generoiSeuraava(); // Ensimmäinen saapuminen järjestelmään
	}
	
	
	@Override
	protected void suoritaTapahtuma(Tapahtuma t){  // B-vaiheen tapahtumat
		
		if(t.getTyyppi()==TapahtumanTyyppi.ARR1) {
			palvelupisteet[0].lisaaJonoon(new Asiakas());	
			saapumisprosessi.generoiSeuraava();	
			
			//Käydään kaikki palvelupisteet paitsi indeksin "0", eli
			//vastaanotto
			Palvelupiste lyhyin = palvelupisteet[1];
			for(int i = 1; i < palvelupisteet.length; i++) {
				if(lyhyin.getJononPituus()<palvelupisteet[i].getJononPituus())
					lyhyin = palvelupisteet[i];
			}
			Asiakas a = palvelupisteet[0].otaJonosta();
			lyhyin.lisaaJonoon(a);
		} else {
			for(Palvelupiste p : palvelupisteet) {
				if(p.vertaaTapahtumaan(t)) {
					Asiakas a = p.otaJonosta();
					a.setPoistumisaika(Kello.getInstance().getAika());
					a.raportti();
					break;
				}
			}
		}

		/*
		Asiakas a;
		switch (t.getTyyppi()){
			
			case ARR1: palvelupisteet[0].lisaaJonoon(new Asiakas());	
				       saapumisprosessi.generoiSeuraava();
				break;
			case DEP1: a = palvelupisteet[0].otaJonosta();
				   	   palvelupisteet[1].lisaaJonoon(a);
				break;
			case DEP2: a = palvelupisteet[1].otaJonosta();
				   	   palvelupisteet[2].lisaaJonoon(a);
				break;  
			case DEP3: 
				       a = palvelupisteet[2].otaJonosta();
					   a.setPoistumisaika(Kello.getInstance().getAika());
			           a.raportti();
		}	*/
	}
	
	public void setTyontekijat(int maara) {
		//Vähintään yksi työntekijä per piste
		if(maara < palvelupisteidenLKM)
			maara = palvelupisteidenLKM;
		this.tyontekijatLKM = maara;
	}
	
	public void setPalvelupisteet(int maara) {
		if(maara < 2) //Vähintään tiski ja yksi korjauspiste
			maara = 2;
		this.palvelupisteidenLKM = maara;
	}
	
	public static double arvoAika(double keskiarvo, double varianssi) {
		Normal normal = new Normal(keskiarvo, varianssi);
		double aika = normal.sample();
		return aika;
	}

	
	@Override
	protected void tulokset() {	
		
		int tiskiJonossa = palvelupisteet[0].getJononPituus();
		int paljonoissa = 0;
		for(int i = 1; i < palvelupisteet.length; i++) {
			paljonoissa+=palvelupisteet[i].getJononPituus();
		}
		
		System.out.println("Simulointi päättyi kello " + Kello.getInstance().getAikaKello());
		System.out.println("Autokorjaamo ansaitsi "+Pisteet.getInstance().getPisteet()+" pistettä");
		System.out.println("Asiakkaita yhteensä " + Asiakas.getLkm()+", asiakkaita poistui: "+Pisteet.getInstance().getAsiakkaat());
		System.out.println("Asiakkaita jäi tiskin jonoon " + tiskiJonossa +", asiakkaita korjaamon jonoissa: "+paljonoissa);
		System.out.println("Tyytyväisyyden keskiarvo: "+Pisteet.getInstance().getKeskiTyytyvaisyys()+"%");
		System.out.println("\n");
		for(int i = 0; i < palvelupisteet.length;i++) {
			System.out.println("Palvelupisteellä ["+i+"] on "+palvelupisteet[i].getTyontekijat()+" työntekijää!");
		}
		
	}

	
}
