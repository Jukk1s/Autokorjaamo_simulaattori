package simu.model;

import java.util.LinkedList;
import java.util.Random;

import eduni.distributions.ContinuousGenerator;
import simu.framework.Kello;
import simu.framework.Tapahtuma;
import simu.framework.Tapahtumalista;

// TODO:
// Palvelupistekohtaiset toiminnallisuudet, laskutoimitukset (+ tarvittavat muuttujat) ja raportointi koodattava
public class Palvelupiste {

	private LinkedList<Asiakas> jono = new LinkedList<Asiakas>(); // Tietorakennetoteutus
	
	private ContinuousGenerator generator;
	private Tapahtumalista tapahtumalista;
	private TapahtumanTyyppi skeduloitavanTapahtumanTyyppi; 
	
	private double tapahtumanLoppumisAika;
	
	private int tyontekijat;
	private int asiakkaat;
	private double tyonTehokkuus;
	
	private int tulot = 0;
	
	private int id;
	private static int ppMaara = 0;
	
	//JonoStartegia strategia; //optio: asiakkaiden järjestys
	
	private boolean varattu = false;


	public Palvelupiste(ContinuousGenerator generator, Tapahtumalista tapahtumalista, TapahtumanTyyppi tyyppi){
		this.tapahtumalista = tapahtumalista;
		this.generator = generator;
		this.skeduloitavanTapahtumanTyyppi = tyyppi;
		setTyontekijat(0);//Asetetaan tätä kautta koska metodi laskee tehokkuuden samalla
		asiakkaat = 0;
		id = ppMaara++;
	}
	
	public Palvelupiste(Tapahtumalista tapahtumalista,TapahtumanTyyppi tyyppi) {
		this.tapahtumalista = tapahtumalista;
		this.skeduloitavanTapahtumanTyyppi = tyyppi;
		asiakkaat = 0;
		id = ppMaara++;
	}
	
	public Palvelupiste(Tapahtumalista tapahtumalista) { //Korjaamopiste
		this.tapahtumalista = tapahtumalista;
		asiakkaat = 0;
		id = ppMaara++;
	}


	public void lisaaJonoon(Asiakas a){   // Jonon 1. asiakas aina palvelussa
		jono.add(a);
		asiakkaat++;
	}

	public Asiakas poistaJonosta(){  // Poistetaan palvelussa ollut
		varattu = false;
		jono.peek().setTapahtuma(skeduloitavanTapahtumanTyyppi);
		return jono.poll();
	}
	
	public void aloitaPalvelu() {
		if(skeduloitavanTapahtumanTyyppi!=TapahtumanTyyppi.ARR1) {
			varattu = true;
			Random random = new Random(System.nanoTime());
			int num = random.nextInt(8)+1;
			switch(num) {
				case 1:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP1;
					break;
				case 2:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP2;
					break;
				case 3:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP3;
					break;
				case 4:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP4;
					break;
				case 5:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP5;
					break;
				case 6:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP6;
					break;
				case 7:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP7;
					break;
				case 8:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP8;
					break;
				default:
					skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP1;
					break;
			}
			
			double keskiarvo = Tapahtuma.getKeskimAika(skeduloitavanTapahtumanTyyppi);
			double varianssi = keskiarvo;
			double muuttujaX = (OmaMoottori.arvoAika(keskiarvo, varianssi));
			double palvelunKesto = muuttujaX/tyonTehokkuus;
			System.out.println("Palvelun kesto: "+muuttujaX+"/"+tyonTehokkuus+" -> "+palvelunKesto + " ----- Tapahtumatyypin keston keskiarvo: " + keskiarvo);
			
			tapahtumanLoppumisAika = Kello.getInstance().getAika() + palvelunKesto;
		
			
			tapahtumalista.lisaa(new Tapahtuma(skeduloitavanTapahtumanTyyppi,tapahtumanLoppumisAika));
		}
	}

	public void setTyontekijat(int tyontekijat) {
		this.tyontekijat = tyontekijat;
		laskeTehokkuus();
	}
	
	public void increaseTyontekijat() {
		this.tyontekijat++;
		laskeTehokkuus();
	}

	public boolean onVarattu(){
		return varattu;
	}


	public boolean onJonossa(){
		return jono.size() != 0;
	}
	
	public int getJononPituus() {
		return jono.size();
	}

	public int getTyontekijat() {
		return this.tyontekijat;
	}
	
	public int getAsiakkaat() {
		return this.asiakkaat;
	}
	
	public static void resetId() {
		ppMaara = 0;
	}
	
	public void lisaaTulo(int tulo) {
		tulot += tulo;
	}
	
	public double getTuntiTulo() {
		return Math.round((double)tulot/(Kello.getInstance().getPaivanPituus()*Kello.getInstance().getPaiva())*100.0)/100.0;
	}
	
	public int getTulot() {
		return tulot;
	}
	
	private void laskeTehokkuus() {
		double b = (1.02 - 0.02 * Math.pow(tyontekijat, 2));
		
		//Tehokkuus per työntekijä voi olla vähintään 50%
		if(b<0.5)
			b=0.5;
		
		//100% * työntekijät * tehokkuus % per työntekijä
		tyonTehokkuus = 1 * tyontekijat * b;
	}
	
	public int getTyontehokkuus() {
		double temp = tyonTehokkuus * 100;
		return (int) temp;
	}
	
	public boolean vertaaTapahtumaan(Tapahtuma t) {
		return skeduloitavanTapahtumanTyyppi == t.getTyyppi() && t.getAika() == tapahtumanLoppumisAika;
	}
	
	public String getDuuni() {
		switch(skeduloitavanTapahtumanTyyppi) {
		case DEP1: //Renkaiden vaihto
			return "Renkaiden vaihto";
		case DEP2: //Tuulilasin korjaus
			return "Tuulilasin korjaus";
		case DEP3: //Öljyn vaihto
			return "Öljyn vaihto";
		case DEP4: //Renkaiden vaihto
			return "Renkaiden vaihto";
		case DEP5: //Ilmastoinnin täyttö
			return "Ilmastoinnin täyttö";
		case DEP6: //Pienet korjaukset
			return "Pieni korjaus";
		case DEP7: //Isot korjaukset
			return "Iso korjaus";
		case DEP8: //Katsastus
			return "Katsastus";
		case TAU0:
			return "Röökillä";
		default:
			return "Röökillä";
		}
	}
	
	@Override
	public String toString() {
		if(id==0)
			return "Tiski";
		return "Korjaamopiste "+id;
	}
	
}
