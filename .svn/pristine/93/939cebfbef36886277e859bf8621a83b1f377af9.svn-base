package simu.framework;
import java.util.Random;

import eduni.distributions.*;
import simu.model.TapahtumanTyyppi;

public class Tapahtuma implements Comparable<Tapahtuma> {
	
		
	private TapahtumanTyyppi tyyppi;
	private double aika;
	private int tulot;
	private double keskimAikaMin;
	private double kesto;
	
	private Normal normaalijakauma;
	
	
	public Tapahtuma(TapahtumanTyyppi tyyppi, double aika){
		this.tyyppi = tyyppi;
		this.aika = aika;
		
		switch(this.tyyppi) {
			case DEP1: //Renkaiden vaihto
				this.tulot = 30;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP1);		
				break;
			case DEP2: //Tuulilasin korjaus
				this.tulot = 130;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP2);
				break;
			case DEP3: //Öljyn vaihto
				this.tulot = 80;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP3);
				break;
			case DEP4: //Jarrujen vaihtotyö
				this.tulot = 140;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP4);
				break;
			case DEP5: //Ilmastoinnin täyttö
				this.tulot = 90;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP5);
				break;
			case DEP6: //Pienet korjaukset
				this.tulot = 60;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP6);
				break;
			case DEP7: //Isot korjaukset
				this.tulot = 240;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP7);
				break;
			case DEP8: //Katsastus
				this.tulot = 120;
				this.keskimAikaMin = getKeskimAika(TapahtumanTyyppi.DEP8);
				break;
			default:
				this.tulot = 0;
				this.keskimAikaMin = 0;
		}
		
	}
	
	public static int getKeskimAika(TapahtumanTyyppi tyyppi) {
		switch(tyyppi) {
			case DEP1:
				return 10;
			case DEP2:
				return 45;
			case DEP3:
				return 10;
			case DEP4:
				return 60;
			case DEP5:
				return 45;
			case DEP6:
				return 30;
			case DEP7:
				return 120;
			case DEP8:
				return 60;
		}
		return 0;
	}
	
	public int getTulot() {return tulot;}
	
	public void setArvottuPalveluaika(double kesto) {
		this.kesto = kesto;
	}
	
	public double getArvottuPalveluaika() {
		return this.kesto;
	}
	
	public void setTyyppi(TapahtumanTyyppi tyyppi) {
		this.tyyppi = tyyppi;
	}
	public TapahtumanTyyppi getTyyppi() {
		return tyyppi;
	}
	public void setAika(double aika) {
		this.aika = aika;
	}
	public double getAika() {
		return aika;
	}
	
	public static String tapahtumaKuvailu(TapahtumanTyyppi tyyppi) {
			switch(tyyppi) {
			case DEP1: //Renkaiden vaihto
				return "Renkaiden vaihto";
			case DEP2: //Tuulilasin korjaus
				return "Tuulilasin korjaus";
			case DEP3: //Öljyn vaihto
				return "Öljyn vaihto";
			case DEP4: //Jarrujen vaihtotyö
				return "Renkaiden vaihto";
			case DEP5: //Ilmastoinnin täyttö
				return "Ilmastoinnin täyttö";
			case DEP6: //Pienet korjaukset
				return "Pieni korjaus";
			case DEP7: //Isot korjaukset
				return "Iso korjaus";
			case DEP8: //Katsastus
				return "Katsastus";
			case TAU0: //Tauolla
				return "Tauolla";
			default:
				return "Röökillä";
			}
	}
	
	public String tapahtumaKuvailu() {
		switch(tyyppi) {
		case DEP1: //Renkaiden vaihto
			return "Renkaiden vaihto";
		case DEP2: //Tuulilasin korjaus
			return "Tuulilasin korjaus";
		case DEP3: //Öljyn vaihto
			return "Öljyn vaihto";
		case DEP4: //Jarrujen vaihtotyö
			return "Renkaiden vaihto";
		case DEP5: //Ilmastoinnin täyttö
			return "Ilmastoinnin täyttö";
		case DEP6: //Pienet korjaukset
			return "Pieni korjaus";
		case DEP7: //Isot korjaukset
			return "Iso korjaus";
		case DEP8: //Katsastus
			return "Katsastus";
		case TAU0: //Tauolla
			return "Tauolla";
		default:
			return "Röökillä";
		}
}
	
	public static TapahtumanTyyppi randomTapahtuma() {
		TapahtumanTyyppi skeduloitavanTapahtumanTyyppi = null;
		Random random = new Random(System.nanoTime());
		int num = random.nextInt(8)+1;
		switch(num) {
			case 1:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP1;
				break;
			case 2:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP2;
				break;
			case 3:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP3;
				break;
			case 4:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP4;
				break;
			case 5:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP5;
				break;
			case 6:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP6;
				break;
			case 7:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP7;
				break;
			case 8:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP8;
				break;
			default:
				skeduloitavanTapahtumanTyyppi = TapahtumanTyyppi.DEP1;
				break;
		} return skeduloitavanTapahtumanTyyppi;
	}

	@Override
	public int compareTo(Tapahtuma arg) {
		if (this.aika < arg.aika) return -1;
		else if (this.aika > arg.aika) return 1;
		return 0;
	}
	
	@Override
	public String toString() {
		return this.tyyppi.toString();
	}
	
}
